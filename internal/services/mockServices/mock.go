// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/interfaces/offer.go

// Package mockServices is a generated GoMock package.
package mockServices

import (
	context "context"
	reflect "reflect"

	entities "github.com/amalmadhu06/mariadb-fiber-go/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockOfferUsecase is a mock of OfferUsecase interface.
type MockOfferUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockOfferUsecaseMockRecorder
}

// MockOfferUsecaseMockRecorder is the mock recorder for MockOfferUsecase.
type MockOfferUsecaseMockRecorder struct {
	mock *MockOfferUsecase
}

// NewMockOfferUsecase creates a new mock instance.
func NewMockOfferUsecase(ctrl *gomock.Controller) *MockOfferUsecase {
	mock := &MockOfferUsecase{ctrl: ctrl}
	mock.recorder = &MockOfferUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfferUsecase) EXPECT() *MockOfferUsecaseMockRecorder {
	return m.recorder
}

// GetOffer mocks base method.
func (m *MockOfferUsecase) GetOffer(ctx context.Context, country string) ([]entities.OfferCompany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffer", ctx, country)
	ret0, _ := ret[0].([]entities.OfferCompany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffer indicates an expected call of GetOffer.
func (mr *MockOfferUsecaseMockRecorder) GetOffer(ctx, country interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffer", reflect.TypeOf((*MockOfferUsecase)(nil).GetOffer), ctx, country)
}
